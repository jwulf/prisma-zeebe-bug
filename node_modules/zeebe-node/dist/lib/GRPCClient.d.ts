/// <reference types="node" />
import { Options } from '@grpc/proto-loader';
import { EventEmitter } from 'events';
import { Client } from 'grpc';
import { Loglevel } from './interfaces';
import { OAuthProvider } from './OAuthProvider';
interface GRPCClientExtendedOptions {
    longPoll?: number;
}
export declare class GRPCClient extends EventEmitter {
    channelClosed: boolean;
    longPoll?: number;
    connected: boolean;
    client: Client;
    onReady?: () => void;
    private packageDefinition;
    private listNameMethods;
    private logger;
    private gRPCRetryCount;
    private oAuth?;
    private readyTimer?;
    private failTimer?;
    private connectionTolerance;
    private onConnectionError?;
    constructor({ connectionTolerance, host, loglevel, oAuth, options, packageName, protoPath, service, tasktype, useTLS, stdout, onConnectionError, onReady, }: {
        connectionTolerance: number;
        host: string;
        loglevel: Loglevel;
        oAuth?: OAuthProvider;
        options: Options & GRPCClientExtendedOptions;
        packageName: string;
        protoPath: string;
        service: string;
        tasktype: string;
        useTLS: boolean;
        stdout: any;
        onConnectionError?: () => void;
        onReady?: () => void;
    });
    runService(fnName: any, data: any, fnAnswer: any): void;
    listMethods(): string[];
    close(timeout?: number): Promise<unknown>;
    private getJWT;
    private watchGrpcChannel;
    private setReady;
    private setNotReady;
    private handleGrpcError;
}
export {};
