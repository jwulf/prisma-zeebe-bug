"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
class JobPoller extends events_1.EventEmitter {
    constructor({ pollInterval, gRPCClient, taskType, maxActiveJobs, logger, id, timeout, }) {
        super();
        this.activeJobs = 0;
        this.pollInterval = pollInterval;
        this.gRPCClient = gRPCClient;
        this.logger = logger;
        this.maxActiveJobs = maxActiveJobs;
        this.taskType = taskType;
        this.id = id;
        this.timeout = timeout;
        this.pollHandle = setInterval(() => this.activateJobs(), this.pollInterval);
    }
    close() {
        clearInterval(this.pollHandle);
    }
    makeFailureHandler(job) { }
    makeSuccessHandler(job) { }
    activateJobs() {
        if (this.activeJobs >= this.maxActiveJobs) {
            this.logger.log(`Worker at max capacity - ${this.taskType} has ${this.activeJobs} and a capacity of ${this.maxActiveJobs}.`);
        }
        const amount = this.maxActiveJobs - this.activeJobs;
        const activateJobsRequest = {
            maxJobsToActivate: amount,
            requestTimeout: -1,
            timeout: this.timeout,
            type: this.taskType,
            worker: this.id,
        };
        let stream;
        try {
            stream = this.gRPCClient.activateJobsStream(activateJobsRequest);
            if (this.debug) {
                this.pollCount++;
            }
        }
        catch (err) {
            this.handleGrpcError(err);
            return {
                error: true,
            };
        }
    }
}
exports.JobPoller = JobPoller;
//# sourceMappingURL=JobPoller.js.map