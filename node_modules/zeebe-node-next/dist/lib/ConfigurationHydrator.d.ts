import * as ZB from './interfaces';
import { OAuthProviderConfig } from './OAuthProvider';
export declare class ConfigurationHydrator {
    static configure(gatewayAddress: string | undefined, options: ZB.ZBClientOptions | undefined): {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS?: boolean | undefined;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    } | {
        connectionTolerance?: number | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: any;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth: OAuthProviderConfig | {
            audience: string;
            cacheOnDisk: boolean;
            clientId: string;
            clientSecret: string;
            url: string;
        };
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        useTLS: boolean;
        longPoll?: number | undefined;
        camundaCloud?: ZB.CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk: boolean;
        password: string;
        username: string;
    };
    private static readonly DEFAULT_GATEWAY_PORT;
    private static readonly CAMUNDA_CLOUD_AUTH_SERVER;
    private static readOAuthFromEnvironment;
    private static readBasicAuthFromEnvironment;
    private static readCamundaClusterConfFromEnv;
    private static getGatewayFromEnvironment;
    private static decodeConnectionString;
    private static getCamundaCloudConfig;
    private static justClusterId;
}
